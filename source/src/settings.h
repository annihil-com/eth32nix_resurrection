// ETH32 - an Enemy Territory cheat for windows
// Copyright (c) 2007 eth32 team
// www.cheatersutopia.com & www.nixcoders.org

#pragma once
#define MAX_SETTING_VALUES	31

typedef enum {
	SETTING_INT,
	SETTING_FLOAT,
	SETTING_BOOL,
	SETTING_VEC3,
	SETTING_VEC4,
	SETTING_BYTE3,
	SETTING_STRING,
	MAX_SETTINGS
} settingtype_t;

typedef struct settingvalue_s {
	float value;
	const char *text;
} settingvalue_t;

typedef struct settingdef_s {
	const char *name;
	const char *defaultValue;
	settingtype_t type;
	void *target;
	const char *description;
	float min, max;
	settingvalue_t values[MAX_SETTING_VALUES];
} settingdef_t;

const static settingdef_t settingsDefs[] =
{
	// Name				Default			Type			Target
	//	Description
	//	Min / Max
	//		Value				TextValue
	/** *******************************************************************
					AIMBOT
	******************************************************************* **/
	{ "aimmode",			"1",			SETTING_INT,		(void*)&eth32.settings.aimMode,
		"master aimbot mode",
		AIMMODE_OFF, AIMMODE_MAX-1,
		{
			{ (int)AIMMODE_OFF,		"off" },
			{ (int)AIMMODE_NORMAL,		"normal" },
		},
	},
	{ "aimtype",			"3",			SETTING_INT,		(void*)&eth32.settings.aimType,
		"determines when the aimbot will activate",
		AIM_OFF, AIM_MAX-1,
		{
			{ (int)AIM_OFF,			"off" },
			{ (int)AIM_ON_FIRE,		"onfire" },
			{ (int)AIM_ON_BUTTON, 	"onbutton" },
			{ (int)AIM_ALWAYS,		"always" },
		},
	},
	{ "autofire",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autofire,
		"aimbot will fire for you when target available\n   (autofire must be turned on per weapon aswell)",
	},
	{ "atkvalid",			"false",		SETTING_BOOL,		(void*)&eth32.settings.atkValidate,
		"inhibits firing, even manually, until a valid target is visible",
	},
	{ "locktarget",			"false",		SETTING_BOOL,		(void*)&eth32.settings.lockTarget,
		"once a target is aquired, aimbot will stay on this target while it remains visible",
	},
	{ "fov",			"360",			SETTING_FLOAT,		(void*)&eth32.settings.fov,
		"set the field of vision that the aimbot can select targets from",
		0, 360,
	},
	{ "aimsort",			"2",			SETTING_INT,		(void*)&eth32.settings.aimSort,
		"sets type of sort to be used with valid targets",
		SORT_OFF, SORT_MAX-1,
		{
			{ (int)SORT_OFF,			"off" },
			{ (int)SORT_DISTANCE,		"distance" },
			{ (int)SORT_ATTACKER,  		"attacker" },
			{ (int)SORT_CROSSHAIR,		"crosshair" },
			{ (int)SORT_KDRATIO,		"kdratio" },
			{ (int)SORT_ACCURACY,		"accuracy" },
			{ (int)SORT_THREAT,			"threat" },
		},
	},
	{ "headbody",			"4",			SETTING_INT,		(void*)&eth32.settings.headbody,
		"determines if the aimbot uses the head or body and which order",
		0, AP_MAX-1,
		{
			{ (int)BODY_ONLY,		"bodyonly" },
			{ (int)HEAD_ONLY,		"headonly" },
			{ (int)BODY_HEAD,		"bodyfirst" },
			{ (int)HEAD_BODY,		"headfirst" },
			{ (int)HEAD_PRIORITY,	"headpriority" },
		},
	},
	{ "hitboxtype",			"1",			SETTING_INT,		(void*)&eth32.settings.hitboxType,
		"set the hitbox style to use for aimbot",
		HITBOX_OFF, HITBOX_MAX-1,
		{
			{ (int)HITBOX_OFF,		"off" },
			{ (int)HITBOX_CUSTOM,		"custom" },
		},
	},
	{ "headtracetype",			"1",			SETTING_INT,		(void*)&eth32.settings.headTraceType,
		"set the style of trace used to determine if a target is visible",
		0, HEAD_MAX-1,
		{
			{ (int)HEAD_CENTER,				"center" },
			{ (int)HEAD_STATIC_SURFACE,		"static" },
			{ (int)HEAD_XTRACE,				"xtrace" },
		},
	},
	{ "bodytracetype",			"1",			SETTING_INT,		(void*)&eth32.settings.bodyTraceType,
		"set the style of trace used to determine if a target is visible",
		0, BODY_MAX-1,
		{
			{ (int)BODY_CENTER,			"center" },
			{ (int)BODY_STATIC_SURFACE,	"static" },
			{ (int)BODY_XTRACE,			"xtrace" },
		},
	},
	{ "dynamichitbox",		"0.6",			SETTING_FLOAT,		(void*)&eth32.settings.dynamicHitboxScale,
		"set how much a hitbox will scale based on player movement",
		0, 3,
	},
	{ "animcor", 			"-2.000", 		SETTING_FLOAT, 		(void*)&eth32.settings.animCorrection,
		"animation correction for aimbot",
		-10, 10,
	},
	{ "autocrouch",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autoCrouch,
		"enable auto crouching when target is visible",
	},
	
	{ "grenadebot", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeBot,
		"toggles the grenade aimbot",
	},
	{ "riflebot", 			"false",		SETTING_BOOL,		(void*)&eth32.settings.rifleBot,
		"toggles the riflegrenade aimbot",
	},
	{ "grenblockfire", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeBlockFire,
		"blocks firing grenades by accident if there isn't a firing solution",
	},
	{ "valgrentrajectory", 		"true",			SETTING_BOOL, 		(void*)&eth32.settings.valGrenTrajectory,
		"make additional calculations to make sure the grenade doesn't hit anything",
	},
	{ "valrifletrajectory", 	"true",			SETTING_BOOL, 		(void*)&eth32.settings.valRifleTrajectory,
		"make additional calculations to make sure the riflegrenade doesn't hit anything",
	},
	{ "grenadetracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeTracer,
		"shows trajectory of the grenade",
	},
	{ "rifletracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.rifleTracer,
		"shows trajectory of the rifle grenade",
	},
	{ "grensenslock", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeSenslock,
		"locks view if there is a valid firing solution",
	},
	{ "riflenadeZ",			"12.5",			SETTING_FLOAT,		(void*)&eth32.settings.riflenadeZ,
		"z correction for rifle grenade aimpoint",
		-50, 50,
	},
	{ "grenadeZ",			"-50",			SETTING_FLOAT,		(void*)&eth32.settings.grenadeZ,
		"z correction for grenade aimpoint",
		-50, 50,
	},
	{ "grenfiredelay",		"125",			SETTING_INT,		(void*)&eth32.settings.grenadeFireDelay,
		"time left until the grenade explodes after it was launched",
		0, 1000,
	},
	{ "grenadeautofire", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeAutoFire,
		"auto-fire grenade so it will explode right on contact",
	},
	{ "rifleautofire", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.rifleAutoFire,
		"auto-fire riflegrenade as soon as we have a firing solution",
	},
	{ "grenpredict",		"4",			SETTING_INT,		(void*)&eth32.settings.ballisticPredict,
		"predict targets for grenade aimbot",
		0, RF_PREDICT_MAX-1,
		{
			{ (int)RF_PREDICT_OFF, 		"off" },
			{ (int)RF_PREDICT_LINEAR, 	"linear" },
			{ (int)RF_PREDICT_LINEAR2, 	"linear2" },
			{ (int)RF_PREDICT_AVG, 		"avgpos" },
			{ (int)RF_PREDICT_SMART, 	"smart" },
		}
	},
	{ "radiusdamage_enable", 	"true",			SETTING_BOOL,		(void*)&eth32.settings.ballisticRadiusDamage,
		"if target is not visible, try a point within the grenade's blast radius",
	},
	{ "radiusdamage",		"100",			SETTING_FLOAT,		(void*)&eth32.settings.radiusDamage,
		"the grenade blast radius to use",
		30, 1000,
	},
	{ "grenautotarg",		"true",			SETTING_BOOL,		(void*)&eth32.settings.autoGrenTargets,
		"automatically selects grenade targets based on crosshair distance",
	},
	{ "multibounce",		"true",			SETTING_BOOL,		(void*)&eth32.settings.allowMultiBounce,
		"use extra CPU to calculate secondary trajectories with multiple bounces off walls",
	},
	
	/** *******************************************************************
					AIMBOT EXTRA
	******************************************************************* **/
	{ "headsize",	   		"10",	    		SETTING_FLOAT,		(void*)&eth32.settings.headBoxSize,
		"head hitbox size",
		1, 15,
	},
	{ "bodysize",			"30",			SETTING_FLOAT,		(void*)&eth32.settings.bodybox,
		"body hitbox size",
		0, 40,
	},
	{ "autodelay",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autoDelay,
		"enable weapon auto delay",
	},
	{ "delayclose",	   		"0",	   		SETTING_INT,		(void*)&eth32.settings.delayClose,
		"weapon delay for close distance",
		0, 50,
	},
	{ "delayfar",	   		"13",	    		SETTING_INT,		(void*)&eth32.settings.delayFar,
		"weapon delay for far distance",
		0, 50,
	},
	{ "vecstand",			"0.380 -0.300 6.000",		SETTING_VEC3,		(void*)eth32.settings.vecStand,
		"set the hitbox center point for a standing player",
	},
	{ "vecrun",			"0.000 0.000 6.000",		SETTING_VEC3,		(void*)eth32.settings.vecRun,
		"set the hitbox center point for a running player",
	},
	{ "veccrouch",			"-0.500 -0.240 5.500",		SETTING_VEC3,		(void*)eth32.settings.vecCrouch,
		"set the hitbox center point for a crouching player",
	},
	{ "veccrawl",			"0.000 0.000 5.500",		SETTING_VEC3,		(void*)eth32.settings.vecCrawl,
		"set the hitbox center point for a crawling player",
	},
	{ "vecprone",			"0.450 0.240 6.450",		SETTING_VEC3,		(void*)eth32.settings.vecProne,
		"set the hitbox center point for a prone player",
	},	
	
	{ "preshoot",			"false",			SETTING_BOOL,		(void*)&eth32.settings.preShoot,
		"pre-shoot at targets before they are logically visible",
	},
	{ "preaim",			"true",			SETTING_BOOL,		(void*)&eth32.settings.preAim,
		"preaim targets",
	},
	{ "preshoottime",		"50",			SETTING_FLOAT,		(void*)&eth32.settings.preShootTime,
		"preshoot time - higher means earlier shot (and higher chance of miss)",
		0, 300,
	},
	{ "preaimtime",			"150",			SETTING_FLOAT,		(void*)&eth32.settings.preAimTime,
		"preaim time - higher is earlier aiming",
		0, 300,
	},
	{ "predself_type",		"1",			SETTING_INT,		(void*)&eth32.settings.predSelfType,
		"set the type of self prediction to apply",
		0, SPR_MAX-1,
		{
			{ (int)SPR_OFF,			"off" },
			{ (int)SPR_MANUAL,		"manual" },
			{ (int)SPR_PING,		"ping" },
			{ (int)SPR_LEET,		"leet" },
		},
	},
	{ "predself",			"-0.020",		SETTING_FLOAT,		(void*)&eth32.settings.predSelf,
		"set amount to prediction to applied to our own movement (only for manual)",
		-0.1, 0.1,
	},
	{ "autopredbots", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.autoPredictBots,
		"auto adjust target prediction if target is an OmniBot",
	},
	{ "pred",			"-0.005",		SETTING_FLOAT,		(void*)&eth32.settings.pred,
		"set amount of prediction to be applied to human targets",
		-0.1, 0.1,
	},
	{ "predbot",			"-0.049",		SETTING_FLOAT,		(void*)&eth32.settings.predbot,
		"set amount of prediction to be applied to BOT targets",
		-0.1, 0.1,
	},
	
	
	/** *******************************************************************
					VISUALS
	******************************************************************* **/
	{ "orighud", 		"false", 		SETTING_BOOL, 		(void*)&eth32.settings.guiOriginal,
		"use the original ET hud",
	},
	{ "hackvisuals", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.drawHackVisuals,
		"draw hack visuals",
	},
	{ "wallhack",			"true",			SETTING_BOOL,		(void*)&eth32.settings.wallhack,
		"view players and items through walls",
	},
	{ "blackout",			"false",		SETTING_BOOL,		(void*)&eth32.settings.blackout,
		"display the blackout around scoped weapons",
	},
	{ "weapzoom",			"false",		SETTING_BOOL,		(void*)&eth32.settings.weaponZoom,
		"toggle weapon zoom for scoped weapons",
	},
	{ "scopedspeed",		"1.0",			SETTING_FLOAT,		(void*)&eth32.settings.scopedTurnSpeed,
		"determines turning speed while scoped, (normal unscoped speed = 1.0)",
		0.1, 1.0,
	},
	{ "smoketransp",		"0",			SETTING_INT,		(void*)&eth32.settings.smoketrnsp,
		"set the transparency of smoke",
		0,	100,
	},
	{ "radarrange",			"3000",			SETTING_FLOAT,		(void*)&eth32.settings.radarRange,
		"sets the range of the radar window",
		0, 10000,
	},
	{ "bannerscale", 		"1",			SETTING_FLOAT, 		(void*)&eth32.settings.BannerScale,
		"Banner font scale",
		0, 3,
	},
	{ "gui_banner", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.guiBanner,
		"GUI: show stats banner",
	},
	{ "bannerfmt", 			"^2[N] ^0- ^3Name: ^2[n] ^0- ^3Ping: ^2[P] &&^3Kills: ^2[k] ^0- ^3Deaths: ^2[d] ^0- ^3Spree: ^2[S] &&^3Headshots: ^2[/] ^0- ^3Accuracy: ^2[\\]^3% ^0- ^3Hs/Kill: ^2[<]", SETTING_STRING, (void*)eth32.settings.BannerFmt,
		"banner format",
	},
	{ "removefoliage",		"true",			SETTING_BOOL,		(void*)&eth32.settings.removeFoliage,
		"remove completely the foliage",
	},
	{ "warningmsgs",		"true",			SETTING_BOOL,		(void*)&eth32.settings.warningMsg,
		"draw warning messages ('RELOADING', 'LOW AMMO', etc)",
	},
	{ "dmgindicator",		"3",			SETTING_INT,		(void*)&eth32.settings.dmgIndicator,
		"draw damage indicator",
		0, DMG_MAX-1,
		{
			{ (int)DMG_OFF,		"off" },
			{ (int)DMG_HEALTH,	"health" },
			{ (int)DMG_ARROW,	"arrow" },
			{ (int)DMG_HP_ARR,	"health_arrow" },
		},
	},
	{ "dmgarrowsize", 		"50",			SETTING_FLOAT, 		(void*)&eth32.settings.dmgArrSize,
		"sets size of the damage indicator arrow",
		24, 128,
	},
	{ "headhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadHitbox,
		"enable head hitbox drawing",
	},
	{ "headaxes",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadAxes,
		"enable hitbox axis drawing",
	},
	{ "bodyhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBodyHitbox,
		"enable body hitbox drawing",
	},
	{ "debugpoints",		"false",		SETTING_BOOL,		(void*)&eth32.settings.debugPoints,
		"enable drawing of generated aimpoints",
	},
	{ "bulletrail",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBulletRail,
		"enable bullet tracers",
	},
	{ "railwallhack",		"true",			SETTING_BOOL,		(void*)&eth32.settings.railWallhack,
		"see hitboxes and bullet tracers through walls",
	},
	{ "headhbtime",			"20",			SETTING_INT,		(void*)&eth32.settings.headRailTime,
		"set head hitbox stay time (in msec)",
		0, 1000,
	},
	{ "bodyhbtime",			"20",			SETTING_INT,		(void*)&eth32.settings.bodyRailTime,
		"set body hitbox stay time (in msec)",
		0, 1000,
	},
	
	{ "espname",			"false",			SETTING_BOOL,		(void*)&eth32.settings.espName,
		"display player names above their heads",
	},
	{ "grenadedlight",		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeDlight,
		"extra grenade lights inidicating blast area",
	},
	{ "mortardlight",		"true",			SETTING_BOOL,		(void*)&eth32.settings.mortarDlight,
		"extra mortar lights inidicating blast area",
	},
	{ "disguised", 			"true", 		SETTING_BOOL, 		(void *)&eth32.settings.drawDisguised,
		"draw disguised ESP on players",
	},
	{ "mortartrace",		"true",			SETTING_BOOL,		(void*)&eth32.settings.mortarTrace,
		"show mortar trace lines and impact ESP",
	},
	{ "artymarkers",		"true",			SETTING_BOOL,		(void*)&eth32.settings.artyMarkers,
		"show arty blast area lights and ESP",
	},
	{ "classesp",			"2",			SETTING_INT,		(void*)&eth32.settings.classEspType,
		"set the class icon esp style",
		CLS_OFF, CLS_MAX-1,
		{
			{ (int)CLS_STATIC,		"off" },
			{ (int)CLS_STATIC,		"static" },
			{ (int)CLS_DIST,		"distance" },
		},
	},
	{ "classespsize",		"14",			SETTING_FLOAT,		(void*)&eth32.settings.clsSize,
		"set the class icon esp size",
		0, 30,
	},
	{ "classespopacity",		"0.8",			SETTING_FLOAT,		(void*)&eth32.settings.clsOpacity,
		"set the class icon esp opacity",
		0, 1,
	},
	{ "itemesp",			"true",			SETTING_BOOL,		(void*)&eth32.settings.itemEsp,
		"display health and ammo esp icons",
	},
	{ "itemespsize",		"14",			SETTING_FLOAT,		(void*)&eth32.settings.itemEspSize,
		"set the health and ammo icon esp size",
		0, 30,
	},
	{ "itemespopacity",		"0.8",			SETTING_FLOAT,		(void*)&eth32.settings.itemEspOpacity,
		"set the health and ammo icon esp opacity",
		0, 1,
	},
	{ "boxesp",			"false",			SETTING_BOOL,		(void*)&eth32.settings.boxEsp,
		"display a box around players",
	},
	{ "boxespborder",		"1",			SETTING_INT,		(void*)&eth32.settings.boxEspBorder,
		"set the box esp border size",
		0, 5,
	},
	{ "boxespopacity",		"0.8",			SETTING_FLOAT,		(void*)&eth32.settings.boxEspOpacity,
		"set the box esp opacity",
		0, 1,
	},
	
	/** *******************************************************************
					VISUAL EXTRA
	******************************************************************* **/
	{ "playershader",		"1",			SETTING_INT,		(void*)&eth32.settings.playerShader,
		"set the style of chams to be applied to players",
		SHADER1_OFF, SHADER1_MAX-1,
		{
			{ (int)SHADER1_OFF,		"off" },
			{ (int)SHADER1_SOLIDA,		"solid_a" },
		},
	},
	{ "playershaderwh",	"true",			SETTING_BOOL,		(void*)&eth32.settings.playerShaderWh,
		"enable wallhack for players shader",
	},
	
	{ "weaponshader",		"1",			SETTING_INT,		(void*)&eth32.settings.weaponShader,
		"set the style of chams to be applied to weapons",
		SHADER1_OFF, SHADER1_MAX-1,
		{
			{ (int)SHADER1_OFF,		"off" },
			{ (int)SHADER1_SOLIDA,		"solid_a" },
		},
	},
	{ "weaponshaderwh",	"true",			SETTING_BOOL,		(void*)&eth32.settings.weaponShaderWh,
		"enable wallhack for weapons shader",
	},
	
	{ "itemshader",		"1",			SETTING_INT,		(void*)&eth32.settings.itemShader,
		"set the style of chams to be applied to items",
		SHADER1_OFF, SHADER1_MAX-1,
		{
			{ (int)SHADER1_OFF,		"off" },
			{ (int)SHADER1_SOLIDA,		"solid_a" },
		},
	},
	{ "itemshaderwh",	"true",			SETTING_BOOL,		(void*)&eth32.settings.itemShaderWh,
		"enable wallhack for items shader",
	},
	
	
	{ "colorteam",			"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorTeam,
		"set the color of team chams",
	},
	{ "colorteamhid",		"0 0 100",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamHidden,
		"set the color of team chams when hidden",
	},
	{ "colorteamweap",		"0 0 150",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamWeapon,
		"set the color of team weapons",
	},
	{ "colorenemy",			"255 0 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemy,
		"set the color of enemy chams",
	},
	{ "colorenemyhid",		"100 0 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyHidden,
		"set the color of enemy chams when hidden",
	},
	{ "colorenemyweap", 		"255 100 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyWeapon,
		"set the color of enemy weapons",
	},
	{ "colorinvuln",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorInvulnerable,
		"set the color of player chams when they are invulnerable",
	},
	{ "colorhealth",		"0 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorHealth,
		"set the color of health kits",
	},
	{ "colorammo",			"0 255 255",		SETTING_BYTE3,		(void*)eth32.settings.colorAmmo,
		"set the color of ammo boxes",
	},
	{ "colorworldweapons",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorWorldWeapons,
		"set the color of dropped weapons",
	},
	{ "colorheadhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorHeadHitbox,
		"set the color of the head hitbox",
	},
	{ "colorbodyhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorBodyHitbox,
		"set the color of the body hitbox",
	},
	{ "colorbulletrail",		"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorBulletRail,
		"set the color of bullet tracers",
	},
	{ "colorxaxis",			"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorXAxis,
		"set the color of hitbox x-axis",
	},
	{ "coloryaxis",			"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorYAxis,
		"set the color of hitbox y-axis",
	},
	{ "colorzaxis",			"0 0 1",		SETTING_VEC3,		(void*)eth32.settings.colorZAxis,
		"set the color of hitbox z-axis",
	},
	{ "classteam",			"0.2 0.2 1",		SETTING_VEC3,		(void*)eth32.settings.clsTeam,
		"set the color of team class & weapon esp",
	},
	{ "classenemy",			"1 0.2 0.2",		SETTING_VEC3,		(void*)eth32.settings.clsEnemy,
		"set the color of enemy class & weapon esp",
	},	
	{ "missilecolor",		"1 1 1",		SETTING_VEC3,		(void*)&eth32.settings.missileEsp,
		"set the missile esp color",
	},
	{ "gui_titlecolor",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.titleColor,
		"set the gui text title color",
	},
	{ "gui_textcolor1",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.textColor1,
		"set the gui text color",
	},
	{ "gui_textcolor2",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.textColor2,
		"set the gui text color",
	},
	{ "gui_healthhi",		"0 1 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_healthHi,
		"set the health bar color for full health",
	},
	{ "gui_healthmd",		"1 1 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_healthMd,
		"set the health bar color for half health",
	},
	{ "gui_healthlo",		"1 0 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_healthLo,
		"set the health bar color for low health",
	},
	{ "gui_stamina",		"0 0 1 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_stamina,
		"set the stamina bar color",
	},
	{ "gui_charge",			"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_charge,
		"set the charge bar color",
	},
	{ "gui_overheat",		"1 0 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_overheat,
		"set the overheat bar color",
	},
	{ "gui_reload",			"1 1 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_reload,
		"set the reload bar color",
	},
	
	/** *******************************************************************
					MISC
	******************************************************************* **/	
	{ "trans_console",		"false",		SETTING_BOOL, 		(void*)&eth32.settings.transparantConsole,
		"make the console transparent so you can see whats going on"
	},
	{ "respawntimers",		"true",			SETTING_BOOL,		(void*)&eth32.settings.respawnTimers,
		"display enemy respawn times",
	},
	{ "autotapout",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoTapout,
		"when killed, auto-tapout and sends you instantly to the reinforcements queue",
	},
	{ "pbscreenshot", 		"1", 			SETTING_INT, 		(void*)&eth32.settings.pbScreenShot,
		"type of PB screenshot",
  		0, PB_SS_MAX-1,
		{
			{ (int)PB_SS_NORMAL,		"normal" },
			{ (int)PB_SS_CUSTOM,		"custom" },
			{ (int)PB_SS_CLEAN,		"clean" },
		},
	},
	{ "origviewvalues",		"false",		SETTING_BOOL,		(void*)&eth32.settings.origViewValues,
		"enable unmodified view calculations",
	},
	{ "interpolatedps",		"true",			SETTING_BOOL,		(void*)&eth32.settings.interpolatedPs,
		"enable interpolated playerstate",
	},
	{ "damagefeedback",		"false",		SETTING_BOOL,		(void*)&eth32.settings.dmgFeedback,
		"enable damage feedback",
	},
	{ "autovote",			"true",		SETTING_BOOL,		(void*)&eth32.settings.autoVote,
		"enable autovoting 'no' when a vote is called",
	},
	{ "autocomplaint",		"true",		SETTING_BOOL,		(void*)&eth32.settings.autoComplaint,
		"enable auto filing complaint when someone teamkills you",
	},	
	{ "antitk",			"false",		SETTING_BOOL,		(void*)&eth32.settings.antiTk,
		"automatically return fire to teamkillers",
	},
	{ "namesteal", 			"false", 		SETTING_BOOL, 		(void*)&eth32.settings.doNamesteal,
		"Enable namestealing",
	},
	{ "namesteal_delay", 		"1000", 			SETTING_INT, 		(void*)&eth32.settings.NamestealDelay,
		"Time to wait between changing names (in ms)",
		0, 20000,
	},
	{ "namesteal_grace", 		"1000", 			SETTING_INT, 		(void*)&eth32.settings.NamestealGrace,
		"Time to wait in ms to start stealing after joining a server",
		0, 20000,
	},
	{ "namesteal_mode", 		"0", 			SETTING_INT, 		(void*)&eth32.settings.NamestealMode,
		"Type of namestealing to do",
		0, NAMESTEAL_MAX-1,
		{
			{ (int)NAMESTEAL_TEAM,		"team" },
			{ (int)NAMESTEAL_ENEMY,		"enemy" },
			{ (int)NAMESTEAL_ALL,		"all" },
			{ (int)NAMESTEAL_FILE,		"file" },
		},
	},
	{ "namestealexact", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.nsSmartMode,
		"Enable PB proof exact namestealing",
	},
	/** *******************************************************************
					EXTRA
	******************************************************************* **/	
	{ "spoofOs",			"true",			SETTING_BOOL,		(void*)&eth32.settings.etproOs,
		"enable etpro os spoofing\n true = win32, false = linux",
	},
	{ "pk3name",			"resurrection.pk3",		SETTING_STRING,		(void*)eth32.settings.pk3file,
		"the main eth32 pk3 file name",
	},
	{ "etproGuid",			"",			SETTING_STRING,		(void*)eth32.settings.etproGuid,
		"set your custom etpro GUID",
	},
	{ "jaymac",			"",			SETTING_STRING,		(void*)eth32.settings.jayMac,
		"set your custom jaymod MAC address (prevents bans based on MAC)",
	},
};
